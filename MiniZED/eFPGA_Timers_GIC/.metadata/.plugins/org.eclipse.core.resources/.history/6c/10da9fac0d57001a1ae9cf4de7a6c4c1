/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xscutimer.h"
#include "xscugic.h"

//static void timer2_interrupt_handler(void *CallBackRef);

int InterruptCounter= 0;

int main()
{
	int Status;
	int Timer1_Value;
	int counter = 0;

	/**
	 * The XScuTimer driver instance data. The user is required to allocate a
	 * variable of this type for every timer device in the system.
	 * A pointer to a variable of this type is then passed to the driver API
	 * functions.
	 */

	XScuTimer Timer1, Timer2;

	/**
	 * This typedef contains configuration information for the device.
	 */

	XScuTimer_Config * Timer1_config ,* Timer2_config;

	/**
	* Lookup the device configuration based on the unique device ID. The table
	* contains the configuration info for each device in the system.
	**/

	Timer1_config = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);
	//Timer2_config = XScuTimer_LookupConfig(XPAR_PS7_SCUTIMER_0_DEVICE_ID);

	/**
	* CfgInitialize a specific interrupt controller instance/driver
	**/
	Status = XScuTimer_CfgInitialize(&Timer1, Timer1_config, Timer1_config->BaseAddr);

	/** Write to the timer load register. This will also update the
	* timer counter register with the new value. This macro can be used to
	* change the time-out value.
	**/

	XScuTimer_LoadTimer(&Timer1,10000000);

	// Start The Timer

	XScuTimer_Start(&Timer1);

    init_platform();


    xil_printf("Timer Demo Application...\n\r");

    while(1)
    {
    	sleep_A9(1);
    	Timer1_Value = XScuTimer_GetCounterValue(&Timer1);
    	if(Timer1_Value == 0)
    	{
    		xil_printf("Timer end reached...");
    	}
    	else
    	{
    		xil_printf("Timervalue: %d\n\r",Timer1_Value);
    		while(1);
    	}
    	sleep_A9(1);
    }

    cleanup_platform();
    return 0;
}
