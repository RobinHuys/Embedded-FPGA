using namespace std;
#include <stdio.h>
#include <iostream>
#include "TensorFlowLite.h"

#include "main_functions.h"

#include "constants.h"
#include "output_handler.h"
#include "sine_model_data.h"
#include "tensorflow/lite/experimental/micro/kernels/all_ops_resolver.h"
#include "tensorflow/lite/experimental/micro/micro_error_reporter.h"
#include "tensorflow/lite/experimental/micro/micro_interpreter.h"
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/version.h"

// Globals, used for compatibility with Arduino-style sketches.
namespace {
tflite::ErrorReporter* error_reporter = nullptr;
const tflite::Model* model = nullptr;
tflite::MicroInterpreter* interpreter = nullptr;
TfLiteTensor* input = nullptr;
TfLiteTensor* output = nullptr;
int inference_count = 0;

// Create an area of memory to use for input, output, and intermediate arrays.
// Finding the minimum value for your model may require some trial and error.
constexpr int kTensorArenaSize = 2 * 1024;
uint8_t tensor_arena[kTensorArenaSize];
}  // namespace


int main(int argc, char **argv)
{

	printf("Hello cpp world on Zynq PS\n\r");

	static tflite::MicroErrorReporter micro_error_reporter;
	error_reporter = &micro_error_reporter;
	model = tflite::GetModel(g_sine_model_data);
	if (model->version() != TFLITE_SCHEMA_VERSION) {
	      error_reporter->Report(
	          "Model provided is schema version %d not equal "
	          "to supported version %d.",
	          model->version(), TFLITE_SCHEMA_VERSION);


	return 0;
}
